openapi: '3.0.1'
info:
  title: Bands API
  version: "0.1.0"

servers:
  - url: '{protocol}://localhost:9000'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http

tags:
  - name: Albums
    description: Group of actions regarding albums
  - name: Bands
    description: Group of actions regarding bands
  - name: Persons
    description: Group of actions regarding persons

paths:
  /persons/{personId}/bands/{bandId}:
    parameters:
      - $ref: '#/components/parameters/PersonId'
      - $ref: '#/components/parameters/BandId'
    post:
      tags:
        - Persons
      summary: Create a relationship between a person and a band
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayedIn'
      responses:
        '201':
          description: Relationship created
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /persons/{personId}:
    parameters:
      - $ref: '#/components/parameters/PersonId'
    get:
      tags:
        - Persons
      summary: Get the person by its Id
      responses:
        '200':
          description: Person found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Persons
      summary: Delete the person by its Id
      responses:
        '204':
          description: Person deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /persons:
    get:
      parameters:
        - $ref: '#/components/parameters/PersonName'
      tags:
        - Persons
      summary: Get a list of all the persons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Persons
      summary: Create a new person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '201':
          description: Person created
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Persons
      summary: Update a person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: Person updated
        '500':
          $ref: '#/components/responses/InternalServerError'

  /bands/{bandId}:
    parameters:
      - $ref: '#/components/parameters/BandId'
    get:
      tags:
        - Bands
      summary: Get the band by its Id
      responses:
        '200':
          description: Band found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Band'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Bands
      summary: Delete the band by its Id
      responses:
        '204':
          description: Band deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /bands:
    get:
      tags:
        - Bands
      summary: Get a list of all the bands
      responses:
        '200':
          description: List of bands
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Band'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Bands
      summary: Create a new band
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Band'
      responses:
        '201':
          description: Created
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Bands
      summary: Update the band by its Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Band'
      responses:
        '200':
          description: Band updated
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /band-page:
    post:
      tags:
        - Bands
      summary: Save band page data coming from the scraper
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BandPage'
      responses:
        '201':
          description: Content saved properly
        '500':
          $ref: '#/components/responses/InternalServerError'

  /albums/{albumId}:
    parameters:
      - $ref: '#/components/parameters/AlbumId'
    get:
      tags:
        - Albums
      summary: Get the album by its Id
      responses:
        '200':
          description: Album found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Albums
      summary: Delete the album by its Id
      responses:
        '204':
          description: Album deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /albums:
    get:
      parameters:
        - $ref: '#/components/parameters/LowerBound'
        - $ref: '#/components/parameters/UpperBound'
      tags:
        - Albums
      summary: Get a list of all the albums
      responses:
        '200':
          description: List of albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Albums
      summary: Create a new album
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      responses:
        '201':
          description: Created
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Albums
      summary: Update the album by its Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      responses:
        '200':
          description: Album updated
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Album:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        title:
          description: Title of the album
          type: string
        released:
          description: Date when the album was first released (yyyy-MM-dd)
          type: string
          format: date
      required:
        - title

    Band:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          description: Name of the band
          type: string
          example: Metallica
        country:
          type: string
          description: Country of origin
        formed:
          description: Year when the band was formed
          type: string
          format: full-year
        disbanded:
          description: Year when the band was disbanded
          type: string
          format: full-year
      required:
        - name

    BandPage:
      type: object
      properties:
        name:
          description: Name of the band
          type: string
          example: Metallica
        formed:
          type: object
          properties:
            date:
              type: string
              format: full-year
            location:
              $ref: '#/components/schemas/Location'
        disbanded:
          type: object
          properties:
            date:
              type: string
              format: full-year
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'

    Location:
      type: object
      properties:
        country:
          type: string
        state:
          type: string
        city:
          type: string
      required:
        - country

    Member:
      type: object
      properties:
        full_name:
          type: string
        aka:
          type: string
        instruments:
          type: array
          items:
            type: string
        periods:
          type: array
          items:
            $ref: '#/components/schemas/Period'

    Period:
      type: object
      properties:
        start:
          type: string
          format: full-year
        end:
          type: string
          format: full-year

    Person:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        full_name:
          description: Name of the person
          type: string
          example: John Smith
        first_name:
          description: First name of the person
          type: string
          example: John
        last_name:
          description: Last name of the person
          type: string
          example: Smith
        aka:
          type: string
          description: Nickname, or alternative names
        born:
          type: string
          format: full-date
          description: Date of birth (yyyy-MM-dd)
      required:
        - full_name

    PlayedIn:
      type: object
      properties:
        instruments:
          description: List of instruments played by the member in the band
          type: array
          items:
            type: string
        start:
          type: string
          format: full-year
          description: Year when the member started playing in the band
        end:
          type: string
          format: full-year
          description: Year when the member stopped playing in the band

    uuid:
      description: Unique identifier
      type: string
      format: uuid

  parameters:
    AlbumId:
      name: albumId
      in: path
      required: true
      description: Id of album to use
      schema:
        $ref: '#/components/schemas/uuid'

    BandId:
      name: bandId
      in: path
      description: Id of band to use
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    PersonId:
      name: personId
      in: path
      description: Id of person to use
      required: true
      schema:
        $ref: '#/components/schemas/uuid'

    PersonName:
      name: full-name
      in: query
      description: Name of the person
      schema:
        type: string

    BandName:
      name: name
      in: query
      description: Name of the band
      schema:
        type: string

    LowerBound:
      name: start
      in: query
      description: Minimum year to include in search
      schema:
        type: string
        format: full-year

    UpperBound:
      name: end
      in: query
      description: Maximum year to include in search
      schema:
        type: string
        format: full-year

  responses:
    NotFound:
      description: Resource not found

    InternalServerError:
      description: Internal server error
